// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                    String               @id @default(cuid())
  nickname             String               @unique
  email                String?              @unique
  password             String
  level                Int                  @default(1)
  points               Int                  @default(0)
  verificationCode     String?
  isVerified          Boolean              @default(false)
  role                 String               @default("user")
  donationParticipations DonationParticipation[]
  lastIpAddress        String?
  deviceInfo           String?
  isActive            Boolean              @default(true)
  bannedAt            DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  queueEntries        QueueUser[]
  taskAttempts        TaskAttempt[]
  userBadges          UserBadge[]
  events              Event[]
  editedEvents        Event[]              @relation("editor")
  news                News[]
  redemptionRequests  RedemptionRequest[]
  helpRequests        HelpRequest[]
  suggestions         Suggestion[]
  bans                UserBan[]
  relatedBans         UserBan[]            @relation("related_bans")
}

model UserBan {
  id          String   @id @default(cuid())
  userId      String
  reason      String
  ipAddress   String
  deviceInfo  String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedUsers User[]  @relation("related_bans")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  time        String
  host        String
  type        String
  status      String   @default("scheduled")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  editedBy    String?
  editor      User?    @relation("editor", fields: [editedBy], references: [id])
}

model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  imageUrl    String
  requirement String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
}

model Task {
  id          String        @id @default(cuid())
  question    String
  options     String        // Armazenado como JSON string
  answer      Int
  points      Int
  type        String        @default("daily")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  attempts    TaskAttempt[]
}

model TaskAttempt {
  id        String   @id @default(cuid())
  userId    String
  taskId    String
  answer    Int
  correct   Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Donation {
  id          String    @id @default(cuid())
  startTime   DateTime  @default(now())
  endTime     DateTime?
  status      String    @default("ACTIVE")
  isQueuePaused Boolean @default(false)
  currentCode String?
  participants DonationParticipation[]
  queueUsers  QueueUser[]
}

model DonationParticipation {
  id          String   @id @default(cuid())
  donationId  String
  userId      String
  cambios     Int      @default(0)
  joinedAt    DateTime @default(now())
  leftAt      DateTime?
  donation    Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QueueUser {
  id            String   @id @default(cuid())
  donationId    String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  donation      Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)
  joinedAt      DateTime @default(now())
  cambiosEarned Int      @default(0)
  avatarUrl     String?
}

model RedemptionRequest {
  id          String   @id @default(cuid())
  userId      String
  points      Int
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HelpRequest {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Suggestion {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}