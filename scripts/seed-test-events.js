const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedTestEvents() {
  try {
    // Buscar um usu√°rio admin para criar os eventos
    const adminUser = await prisma.user.findFirst({
      where: { role: 'admin' }
    });

    if (!adminUser) {
      console.log('‚ùå Nenhum usu√°rio admin encontrado. Execute primeiro o script create-admin.js');
      return;
    }

    console.log('üéÆ Criando eventos de teste...');

    const testEvents = [
      {
        title: 'Mega Evento de Ver√£o 2025',
        description: 'Grande evento de ver√£o com muitos pr√™mios e divers√£o! N√£o perca esta oportunidade √∫nica.',
        date: '28/01/2025',
        time: '15:00',
        brazilTime: '11:00',
        emoji: 'üèñÔ∏è',
        type: 'Evento Especial',
        status: 'Em Breve',
        createdBy: adminUser.id
      },
      {
        title: 'Ca√ßa ao Tesouro Semanal',
        description: 'Encontre as pistas escondidas pelo hotel e ganhe c√¢mbios exclusivos.',
        date: '25/01/2025',
        time: '18:30',
        brazilTime: '14:30',
        emoji: 'üó∫Ô∏è',
        type: 'Resist√™ncia',
        status: 'Ativo',
        createdBy: adminUser.id
      },
      {
        title: 'Quiz da T513 - Especial',
        description: 'Teste seus conhecimentos sobre o Habbo Hotel em um quiz super divertido!',
        date: '30/01/2025',
        time: '20:00',
        brazilTime: '16:00',
        emoji: 'üß†',
        type: 'Evento Especial',
        status: 'Programado',
        createdBy: adminUser.id
      },
      {
        title: 'Grande Doa√ß√£o de Inverno',
        description: 'Participe da maior doa√ß√£o do hotel. V√°rios pr√™mios e c√¢mbios!',
        date: '02/02/2025',
        time: '16:00',
        brazilTime: '12:00',
        emoji: 'üí∞',
        type: 'Doa√ß√£o',
        status: 'Em Breve',
        createdBy: adminUser.id
      },
      {
        title: 'Festa de Anivers√°rio T513',
        description: 'Celebre conosco o anivers√°rio da T513 com festa, m√∫sica e pr√™mios especiais.',
        date: '05/02/2025',
        time: '21:00',
        brazilTime: '17:00',
        emoji: 'üéâ',
        type: 'Evento Especial',
        status: 'Em Breve',
        createdBy: adminUser.id
      },
      {
        title: 'Evento Encerrado (Exemplo)',
        description: 'Este √© um exemplo de evento que j√° foi finalizado.',
        date: '20/01/2025',
        time: '19:00',
        brazilTime: '15:00',
        emoji: '‚úÖ',
        type: 'Evento Especial',
        status: 'Finalizado',
        createdBy: adminUser.id
      },
      {
        title: 'Quiz de Natal 2024',
        description: 'Quiz especial de Natal que aconteceu em dezembro com muitos pr√™mios natalinos.',
        date: '25/12/2024',
        time: '22:00',
        brazilTime: '18:00',
        emoji: 'üéÑ',
        type: 'Evento Especial',
        status: 'Finalizado',
        createdBy: adminUser.id
      },
      {
        title: 'Doa√ß√£o de Ano Novo',
        description: 'Grande doa√ß√£o para celebrar a chegada de 2025 com muitos c√¢mbios.',
        date: '01/01/2025',
        time: '00:00',
        brazilTime: '20:00',
        emoji: 'üéä',
        type: 'Doa√ß√£o',
        status: 'Encerrado',
        createdBy: adminUser.id
      }
    ];

    for (const eventData of testEvents) {
      await prisma.event.create({
        data: eventData
      });
      console.log(`‚úÖ Evento criado: ${eventData.title}`);
    }

    console.log('üéä Todos os eventos de teste foram criados com sucesso!');
    console.log('üìÖ Eventos futuros/ativos que aparecer√£o no widget:');
    
    const upcomingEvents = await prisma.event.findMany({
      where: {
        OR: [
          { status: 'Em Breve' },
          { status: 'Ativo' },
          { status: 'Programado' }
        ]
      },
      orderBy: { createdAt: 'desc' }
    });

    upcomingEvents.forEach(event => {
      console.log(`  ‚Ä¢ ${event.emoji} ${event.title} - ${event.status} (${event.date})`);
    });

    console.log('\nüìú Eventos finalizados que aparecer√£o na se√ß√£o "√öltimos Eventos":');
    
    const pastEvents = await prisma.event.findMany({
      where: {
        OR: [
          { status: 'Finalizado' },
          { status: 'Encerrado' }
        ]
      },
      orderBy: { createdAt: 'desc' }
    });

    pastEvents.forEach(event => {
      console.log(`  ‚Ä¢ ${event.emoji} ${event.title} - ${event.status} (${event.date})`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao criar eventos de teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedTestEvents();